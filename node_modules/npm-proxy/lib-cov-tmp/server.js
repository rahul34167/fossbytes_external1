// Generated by CoffeeScript 1.3.1
(function() {
  var createNpmProxyServer, http, httpProxy, rest;

  http = require('http');

  httpProxy = require('http-proxy');

  rest = require('restler');

  createNpmProxyServer = function(options) {
    var child_npm, parent_npm, proxy, server, strip_url_for_npm_vhost;
    proxy = options.target;
    parent_npm = options.parentRegistryTarget;
    child_npm = options.childRegistryTarget;
    child_npm.check = function(req) {
      var url;
      url = ("" + this.scheme + "//" + this.host + ":" + this.port + this.path) + req.url;
      console.log("" + req.method + ":", url);
      req.headers['host'] = "" + this.host + ":" + this.port;
      return rest.get(url, {
        headers: req.headers
      });
    };
    strip_url_for_npm_vhost = function(url) {
      return url.replace('/registry/_design/scratch/_rewrite/', '');
    };
    server = httpProxy.createServer(function(req, res, proxy) {
      var buffer, check, proxyOpts;
      buffer = httpProxy.buffer(req);
      if (req.method === 'GET') {
        check = child_npm.check(req);
        check.on('success', function(data) {
          var proxyOpts;
          req.url = child_npm.path + req.url;
          console.info("INFO: Found " + req.url + " in child npm!");
          req.headers['host'] = child_npm.host;
          proxyOpts = child_npm;
          proxyOpts['buffer'] = buffer;
          return proxy.proxyRequest(req, res, proxyOpts);
        });
        return check.on('error', function(err) {
          var proxyOpts;
          console.error("ERROR: Can't find " + req.url + " in child npm");
          req.url = strip_url_for_npm_vhost(req.url);
          req.url = parent_npm.path + req.url;
          console.info("INFO: proxying to parent npm " + req.url);
          req.headers['host'] = parent_npm.host;
          delete req.headers['authorization'];
          proxyOpts = parent_npm;
          proxyOpts['buffer'] = buffer;
          return proxy.proxyRequest(req, res, proxyOpts);
        });
      } else {
        req.url = child_npm.path + req.url;
        console.info("INFO: Updating " + req.url);
        req.headers['host'] = child_npm.host;
        proxyOpts = child_npm;
        proxyOpts['buffer'] = buffer;
        return proxy.proxyRequest(req, res, proxyOpts);
      }
    });
    server.on('error', function(err) {
      return console.error('ERROR: Server Error:', err);
    });
    server.listen(proxy.port, proxy.host, function() {
      return console.info("Proxying " + proxy.host + ":" + proxy.port);
    });
    return server;
  };

  module.exports = {
    createNpmProxyServer: createNpmProxyServer
  };

}).call(this);
